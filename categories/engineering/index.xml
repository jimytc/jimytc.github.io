<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>engineering on Jim Chen</title><link>https://jimytc.com/categories/engineering/</link><description>Recent content in engineering on Jim Chen</description><generator>Hugo -- gohugo.io</generator><language>en</language><lastBuildDate>Mon, 30 Aug 2021 10:02:30 +0800</lastBuildDate><atom:link href="https://jimytc.com/categories/engineering/index.xml" rel="self" type="application/rss+xml"/><item><title>Specify Rails Version When Init</title><link>https://jimytc.com/posts/2021/08/30/qnote_on_specify_rails_version_when_init/</link><pubDate>Mon, 30 Aug 2021 10:02:30 +0800</pubDate><guid>https://jimytc.com/posts/2021/08/30/qnote_on_specify_rails_version_when_init/</guid><description>It&amp;rsquo;s common to installed multiple versions of the same gem. For example, rails with 5.2.7 and 6.1.1, etc. By default, it uses the latest release.
To specify the old one, just use command like below, which specifies the expected version with underscode _.</description></item><item><title>Typescript Array.map 後的型別推論技巧 - type predicate</title><link>https://jimytc.com/posts/2021/03/27/qnote_on_using_type_predicates/</link><pubDate>Sat, 27 Mar 2021 08:40:22 +0800</pubDate><guid>https://jimytc.com/posts/2021/03/27/qnote_on_using_type_predicates/</guid><description>在集合或陣列類型的資料處理中，偶爾會遇到需要使用 Array.map 把所需要的資料從物件中轉化成另一個陣列物件。 例如
class Foo { bar?: number constructor(bar?: number) { this.bar = bar; } } let foos: Foo[]; fooArray = [ new Foo(123), new Foo() ]; let bars = foos.</description></item><item><title>TypeScript 上手二三事</title><link>https://jimytc.com/posts/2021/02/05/qnote_on_adapting_typescript/</link><pubDate>Fri, 05 Feb 2021 16:06:10 +0800</pubDate><guid>https://jimytc.com/posts/2021/02/05/qnote_on_adapting_typescript/</guid><description>經歷過 Java, Ruby, JavaScript(咦?)，最近因為職涯的轉換開始上手 TypeScript。 簡單說 TypeScript 就是 JavaScript 的超集，最大的好處是加強了型別系統。 上手的過程使用了 91 (Joey Chen) 極速開發帶領的 Tennis Kata 練習。
明確的主題可以練習，不會漫無目的的從頭開始學。 新的語言有新的工具鍊，必須要有基本使用的能力。 承 2，我希望可以最快速的達到我在 Ruby 環境的純 coding 戰力。 目前的感受
用了一個主題上手真的比較精準和快速，簡單說就是作中學。 多了編譯的過程貌似會慢一點點（ TypeScript -&amp;gt; JavaScript -&amp;gt; run Test）。 內建型別推論（Type Inference）在多數情形下可以不去註記型別。 承 3，但是對於某些特別用途，例如 dictionary，就必須要記得註記他。 因為 3 跟 4，反而在寫程式的時候需要特別去思考要不要作型別註記，覺得會有一點額外耗腦。</description></item><item><title>Have Custom Attribute for a Rails ActiveRecord Model</title><link>https://jimytc.com/posts/2020/08/03/note_rails_active_records_attribute/</link><pubDate>Mon, 03 Aug 2020 17:00:19 +0800</pubDate><guid>https://jimytc.com/posts/2020/08/03/note_rails_active_records_attribute/</guid><description>Framework is pretty opinionated in its area, but that also means it handles many repetitive and tedious tasks. When using ORM like ActiveRecord, it saved us so much time defining which model has what attributes.</description></item><item><title>Generate RSA key pairs with encryption</title><link>https://jimytc.com/posts/2020/05/20/qnote_generate_rsa_keys_and_x509_cert/</link><pubDate>Wed, 20 May 2020 23:00:49 +0800</pubDate><guid>https://jimytc.com/posts/2020/05/20/qnote_generate_rsa_keys_and_x509_cert/</guid><description>I&amp;rsquo;ve spent some time investigating how to create RSA key pairs for a feature.
Put a note here just in case I need it again.
Generate RSA private key with 2048 bits $ openssl genrsa -out private.</description></item><item><title>在 Ruby 的測試中輕鬆做到參數化測試</title><link>https://jimytc.com/posts/2020/04/21/simple_parameterized_test_in_ruby/</link><pubDate>Tue, 21 Apr 2020 10:10:48 +0800</pubDate><guid>https://jimytc.com/posts/2020/04/21/simple_parameterized_test_in_ruby/</guid><description>只是個小短篇記錄最近的反思和實際測試能力的應用。
上下文（Context） 最近的兩份工作都主要是在 Rails 開發，兩份工作都是高度重視測試的團隊，不過在實際的場景不太相同一樣，前一份工作主要已經引入或者開發了改善開發效率的工具，而後者是已經有一定許多既存的測試，也有一定複雜度的架構，不過許多開發工具都還在比較早期的階段，比較沒有著墨過多在開發流程的部分。
遇到的問題 參數化測試是撰寫測試案例中非常好用的一種技巧，通常的使用情境在於測試的對象和步驟是一致的，但是輸入和輸出是不同的。
舉例來說，我們有一個類別如下。
class OpGreater attr_reader :op1, :op2 def initialize(op1, op2) @op1 = op1 @op2 = op2 end def call op1 &amp;gt; op2 end end 測試案例可以如下</description></item><item><title>[閱讀筆記] 單元測試的藝術 Part II</title><link>https://jimytc.com/posts/2020/02/23/reading_notes_unit_testing_part_two/</link><pubDate>Sun, 23 Feb 2020 23:58:40 +0800</pubDate><guid>https://jimytc.com/posts/2020/02/23/reading_notes_unit_testing_part_two/</guid><description>單元測試的藝術 - 核心技術篇 (Ch3 - Ch6) 回顧 工作單元的可見最終結果有三。
有回傳值。 系統可見的狀態或行為改變。 呼叫不受測試控制的第三方系統。 測試的種類
單元測試 整合測試 (New) 互動測試 互動測試－ 針對物件如何向其他物件發送訊息的測試。用於測試工作單元的最終結果是與其他系統互動的時候，例如，發送 Log。
測試的藝術在於 在合適的地方加入或使用一個中介層封裝原本的呼叫行為，藉此可以模擬中介層行為進而測試工作單元。 測試程式面臨的挑戰 受測單元的外部依賴（External Dependency） 無法控制的外部依賴會造成“抑制測試”的現象。
抑制測試（test-inhibiting）— 當程式碼依賴於某個外部資源，即使邏輯是完全正確的，但這種依賴仍可能造成測試失敗。
例如，當工作單元的行爲是需要讀取系統中的設定檔案或者網路服務來決定。
測試時常用到的技術 Fake 假物件 假物件是通用名詞，可能會是 Stub 也可能會是 Mock，依照使用情境會有相對應的行為。</description></item><item><title>[閱讀筆記] 單元測試的藝術 Part I</title><link>https://jimytc.com/posts/2020/02/23/reading_notes_unit_testing_part_one/</link><pubDate>Sun, 23 Feb 2020 23:58:24 +0800</pubDate><guid>https://jimytc.com/posts/2020/02/23/reading_notes_unit_testing_part_one/</guid><description>單元測試的藝術 - 入門篇 (Ch1 &amp;amp; Ch2) 定義們 被測試系統 SUT（System Under Test） 被測試程式所測試的對象，可以是函數，可以是類別，可以是一個複雜的元件，也可以是一個軟體。 一般來說
工作單元、使用案例 Use Case 從呼叫系統的一個公開方法，到產生一個測試可見最終結果，在期間這個系統所發生的行為統稱為一個工作單元。
可見的最終結果可以是
回傳值（如果公開方法有回傳值的話） 系統可見的狀態或行為改變，不需要查詢私有狀態就能取得。 呼叫一個不受測試所控制的第三方系統，這個第三方系統不回傳任何值或者回傳值不被系統使用。 單元測試 Unit Test 一個單元測試是一段自動化的程式碼，這段程式會呼叫被測試的工作單元，之後對這個單元的最終結果的某些假設或期望進行驗證。
特質
執行起來快速。可靠、易讀、並且很容易維護。只要產品程式碼不發生變化，單元測試的執行結果是穩定一致的。
自動化的，且可以被重複執行的。 容易被實現。 到第二天還有存在意義，非臨時性的。 任何人都可以按個按鈕執行它。 執行速度很快。 執行結果一致。 應該要能完全掌控受測單元。 完全被隔離的，獨立於其他測試。 如果執行結果失敗，能夠簡單清楚的呈現期望為何以及發生問題的原因在哪。 整合測試 Integration Test 對一個工作單元進行測試，而這個測試對被測試的單元並沒有完全的控制，而是使用該單元一個或多個真實依賴的相依物件，例如時間、網路、資料庫、執行緒或亂數產生器等等。</description></item><item><title>Trapped by Ruby Operators Precedence</title><link>https://jimytc.com/posts/2020/02/22/trapped_by_ruby_operators_precedence/</link><pubDate>Sat, 22 Feb 2020 21:50:00 +0800</pubDate><guid>https://jimytc.com/posts/2020/02/22/trapped_by_ruby_operators_precedence/</guid><description>Let the story begin I started to work on a new production code repository, and I could tell my productivity degraded for almost 7 workdays. But this was not because of my lack of domain knowledge in the new production code nor the new development environment and configuration.</description></item><item><title>使用 GitHub Action 部署部落格 (Hugo)</title><link>https://jimytc.com/posts/2020/02/16/setup_with_github_action/</link><pubDate>Sun, 16 Feb 2020 15:48:03 +0800</pubDate><guid>https://jimytc.com/posts/2020/02/16/setup_with_github_action/</guid><description>這篇想稍微紀錄一下自己改採 GitHub Action 部署的過程，會想使用 GitHub 這個新功能，一部分是想知道有什麼東西之後可以利用的，另外一個讓自己更懶惰一點。哈哈。
什麼是 GitHub Action Github Action 簡單說起來就是 GitHub 自家推出的 CI/CD 工具，好處是跟放在 GitHub 上面的 Repository 有更好的整合，也可以更集中管理，有好有壞，但至少多了一個選擇。
設定的方式可以參考官方文件，基本上需要加入一個 .github/workflows/&amp;lt;workflow_name&amp;gt;.yml，然後在裡面定義不同的工作和工作內部的步驟，詳細設定就自己參考官方文件吧。
GitHub Action 有一個特色是開發人員可以開發 Action 並發布給大家使用，目前已經可以找到很多人已經做好的 Action 來使用，像是發布訊息到 Slack，寄信之類的，非常多。當然，這次要使用的 Hugo 編譯和 GitHub Page 部署也有人做好了。下面就快速帶過我的設定吧</description></item><item><title>Test Cases Like How We Speak</title><link>https://jimytc.com/posts/2019/08/06/test_cases_like_how_we_speak/</link><pubDate>Tue, 06 Aug 2019 09:12:13 +0800</pubDate><guid>https://jimytc.com/posts/2019/08/06/test_cases_like_how_we_speak/</guid><description>In my current software development work, we&amp;rsquo;ve talked about TDD within the team but we haven&amp;rsquo;t really apply this process for couple reasons. But we do care about the products we shipped.</description></item><item><title>Rust Lang at a Glance</title><link>https://jimytc.com/posts/2019/05/28/rust-lang-at-a-glance/</link><pubDate>Tue, 28 May 2019 23:47:44 +0800</pubDate><guid>https://jimytc.com/posts/2019/05/28/rust-lang-at-a-glance/</guid><description>Just a quick glance at Rust-lang, haven’t really done things with it. But I’m interested in its memory management system, so called “ownership”, and no “null” design.
Rust, borned in 2006, was firstly a personal project but then sponsored by Mozilla since 2009.</description></item><item><title>You but Not Only You</title><link>https://jimytc.com/posts/2019/05/20/you-but-not-only-you/</link><pubDate>Mon, 20 May 2019 23:54:49 +0800</pubDate><guid>https://jimytc.com/posts/2019/05/20/you-but-not-only-you/</guid><description>RailsConf 2019, as a technical conference, there is a bunch of presentations about the fundamentals, deep inside the Rails framework, leveling up the skills. Rather than deep diving into those talks I attended, I would like to share more about DHH and other speakers’ thoughts about the Rails community, the connections within it and the bonds with the world.</description></item><item><title>Httplog, the Useful Tool for Rubyist to Debug Http Request</title><link>https://jimytc.com/posts/2018/08/13/httplog-the-useful-tool-for-rubyist-to-debug-http-request/</link><pubDate>Mon, 13 Aug 2018 15:13:58 +0800</pubDate><guid>https://jimytc.com/posts/2018/08/13/httplog-the-useful-tool-for-rubyist-to-debug-http-request/</guid><description>Our application introduced “Sharing to Twitter” feature and we did our own integration with Twitter API. We maintained the integration by ourselves because we did not want to introduce too many dependencies.</description></item><item><title>As a Porter Among Tables in Postgresql</title><link>https://jimytc.com/posts/2016/03/25/as-a-porter-among-tables-in-postgresql/</link><pubDate>Fri, 25 Mar 2016 16:00:00 +0800</pubDate><guid>https://jimytc.com/posts/2016/03/25/as-a-porter-among-tables-in-postgresql/</guid><description>Imagine we have two tables, creations and creation_metadata. id of creations table is foreign key of creation_metadata table. They should be one-to-one relation but actually, records in creations table might not have a corresponding row in creation_metadata table.</description></item><item><title>Ruby Http Request</title><link>https://jimytc.com/posts/2015/08/05/ruby-http-request/</link><pubDate>Wed, 05 Aug 2015 09:33:11 +0800</pubDate><guid>https://jimytc.com/posts/2015/08/05/ruby-http-request/</guid><description>During trial on sending GET request to AppFigures’ RESTful API, I started with net/http and add my client key to request hash.
When firing the request, I have some more request params to use.</description></item></channel></rss>